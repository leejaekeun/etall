package labs.etall.net{	import flash.events.Event;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLVariables;	import flash.utils.ByteArray;	public class  DataLoader extends EventDispatcher{		private var _loadItem:URLLoader;		private var _url:String;		private var loaded:Boolean = false;		public function DataLoader(urlStr:String):void {			_url = urlStr;			trace(_url);			_loadItem=new URLLoader();			_loadItem.addEventListener(ProgressEvent.PROGRESS,xmlHandler);			_loadItem.addEventListener(Event.COMPLETE,xmlHandler);			_loadItem.addEventListener(IOErrorEvent.IO_ERROR,xmlHandler);			_loadItem.addEventListener(HTTPStatusEvent.HTTP_STATUS,xmlHandler);			_loadItem.addEventListener(SecurityErrorEvent.SECURITY_ERROR,xmlHandler);						trace("loadPath:",urlStr);		}				public function start() {			_loadItem.load(new URLRequest(_url));		}		private function xmlHandler(e:Event):void{			switch(e.type){				case Event.COMPLETE:										loaded = true;					//trace("COMPLETE");					dispatchEvent(new Event(Event.COMPLETE));					break;				case IOErrorEvent.IO_ERROR:					trace("文件不存在");					dispatchEvent(new Event(IOErrorEvent.IO_ERROR));					break;				case ProgressEvent.PROGRESS:					//trace("加载进度",int(e.target.bytesLoaded/e.target.bytesTotal)*100+"%");					break;				case HTTPStatusEvent.HTTP_STATUS:					//trace("HTTPSTATUS:"+e);										break;				case SecurityErrorEvent.SECURITY_ERROR:					//trace("跨域安全问题");					//dispatchEvent(new Event(SecurityErrorEvent.SECURITY_ERROR));					break;			}		}				public function get data():* {			if (!this.loaded)				throw new Error('Cannot access an external data until the file has loaded.');						return this._loadItem.data;		}				public function get dataFormat():String {			return this._loadItem.dataFormat;		}						public function get dataAsXml():XML {			if (this.dataFormat != URLLoaderDataFormat.TEXT)				throw new Error('Cannot convert data to XML.');						return new XML(this.data);		}				public function get dataAsUrlVariables():URLVariables {			if (this.dataFormat == URLLoaderDataFormat.BINARY)				throw new Error('Cannot convert data to URLVariables.');						if (this.dataFormat == URLLoaderDataFormat.TEXT)				return new URLVariables(this.data);						return this.data;		}				public function get dataAsByteArray():ByteArray {			if (this.dataFormat != URLLoaderDataFormat.BINARY)				throw new Error('Cannot convert data to a ByteArray.');			return this.data;		}	}}